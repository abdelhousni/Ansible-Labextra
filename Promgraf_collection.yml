---
- name: Install Prometheus and Grafana
  hosts: all
  vars:
    prometheus_alertmanager_config:
      - static_configs:
          - targets: ["promgraf.shadowman.dev:9093"]
    prometheus_global:
      scrape_interval: 5m
      scrape_timeout: 10s
      evaluation_interval: "{{ tower_scrape }}"
    prometheus_scrape_configs:
      - job_name: 'prometheus'
        static_configs:
        - targets: '{{ inventory_hostname }}:9090'
      - job_name: 'tower metrics'
        metrics_path: /api/v2/metrics/
        scrape_interval: '{{ tower_scrape }}'
        scheme: https
        bearer_token: "{{ bearer_token }}"
        static_configs:
        - targets: 'tower1.shadowman.dev:443'
      - job_name: 'tower1.shadowman.dev'
        scrape_interval: '{{ tower_scrape }}'
        static_configs:
        - targets: 'tower1.shadowman.dev:9100'
      - job_name: 'tower2.shadowman.dev'
        scrape_interval: '{{ tower_scrape }}'
        static_configs:
        - targets: 'tower2.shadowman.dev:9100'
      - job_name: 'rhel8.shadowman.dev'
        scrape_interval: '{{ tower_scrape }}'
        static_configs:
        - targets: 'rhel8.shadowman.dev:9100'
    prometheus_alert_rules:  # noqa yaml[line-length]  # noqa line-length
      - groups:
        - name: selinux-rules
          rules:
          - alert: SELinuxDisabled
            expr: node_selinux_current_mode == 0
            for: '{{ tower_scrape }}'
            labels:
              severity: critical
            annotations:
              description: 'SELINUX Disabled for {% raw %}{{ $labels.job }}{% endraw %}.'
              summary: 'SELINUX Disabled (instance: {% raw %}{{ $labels.job }}{% endraw %})'
      - groups:
        - name: memory-rules
          rules:
          - alert: HostOutOfMemory
            expr: node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 < 10
            for: '{{ tower_scrape }}'
            labels:
              severity: warning
            annotations:
              summary: 'Host out of memory (instance: {% raw %}{{ $labels.job }}{% endraw %})'
              description: 'Node memory is filling up (< 10% left)  VALUE = {% raw %}{{ $value }}{% endraw %}'
          - alert: HostTooMuchMemory
            expr: node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 > 90
            for: '{{ tower_scrape }}'
            labels:
              severity: warning
            annotations:
              summary: 'Host too much free memory (instance: {% raw %}{{ $labels.job }}{% endraw %})'
              description: 'Node memory is too free (> 90% left)  VALUE = {% raw %}{{ $value }}{% endraw %}'
      - groups:
        - name: exporter-rules
          rules:
          - alert: ExporterDown
            expr: up == 0
            for: '{{ tower_scrape }}'
            labels:
              severity: critical
            annotations:
              description: 'Metrics exporter service for {% raw %}{{ $labels.job }}{% endraw %} running on {% raw %}{{ $labels.instance }}{% endraw %} has been down for more than 5 minutes.'
              summary: 'Exporter down (instance: {% raw %}{{ $labels.job }}{% endraw %})'
      - groups:
        - name: disk-rules
          rules:
          - alert: HostOutOfDiskSpace
            expr: (node_filesystem_avail_bytes * 100) / node_filesystem_size_bytes < 10
            for: '{{ tower_scrape }}'
            labels:
              severity: warning
            annotations:
              summary: 'Host out of disk space (instance: {% raw %}{{ $labels.job }}{% endraw %})'
              description: 'Disk is almost full (< 10% left)  VALUE = {% raw %}{{ $value }}{% endraw %}'
      - groups:
        - name: cpu-rules
          rules:
          - alert: HostHighCpuLoad
            expr: 100 - (avg by(instance,job) (rate(node_cpu_seconds_total{mode="idle"}[{{ rate_number }}])) * 100) > {{ cpuload }}
            for: '{{ tower_scrape }}'
            labels:
              severity: critical
            annotations:
              summary: 'Host high CPU load (instance: {% raw %}{{ $labels.job }}{% endraw %})'
              description: 'CPU load is > {{ cpuload }}% VALUE = {% raw %}{{ $value }}{% endraw %}'
          - alert: HostLowCpuLoad
            expr: 100 - (avg by(instance,job) (rate(node_cpu_seconds_total{mode="idle"}[{{ rate_number }}])) * 100) < .1
            for: '{{ tower_scrape }}'
            labels:
              severity: warning
            annotations:
              summary: 'Host low CPU load (instance: {% raw %}{{ $labels.job }}{% endraw %})'
              description: 'CPU load is < .1% VALUE = {% raw %}{{ $value }}{% endraw %}'
    alertmanager_receivers:
    - name: snow
      webhook_configs:
        - url: "http://eda.shadowman.dev:8000/endpoint"
          send_resolved: false
    alertmanager_route:
      group_by: ['instance', 'alert']
      group_wait: 5s
      group_interval: 10s
      repeat_interval: 3h
      receiver: 'snow'
    grafana_server:
      protocol: https
      cert_key: "/etc/grafana/shadowman_private.key"
      cert_file: "/etc/grafana/shadowman_cert.cer"
      enforce_domain: false
      enable_gzip: false
      static_root_path: public
      router_logging: false
      serve_from_sub_path: false

  pre_tasks:
    
    - name: Copy Cert for grafana
      ansible.builtin.copy:
        src: /certs/shadowman_cert.cer
        dest: /etc/grafana/shadowman_cert.cer
        owner: grafana
        group: grafana
        mode: '0644'

    - name: Copy Key for grafana
      ansible.builtin.copy:
        src: /certs/shadowman_private.key
        dest: /etc/grafana/shadowman_private.key
        owner: grafana
        group: grafana
        mode: '0644'

  roles:
    - prometheus.prometheus.prometheus
    - prometheus.prometheus.alertmanager
    - grafana.grafana.grafana

  tasks:
    - name: Copy Cert for prometheus
      ansible.builtin.copy:
        src: /certs/shadowman_cert.cer
        dest: /certs/shadowman_cert.cer
        owner: root
        group: root
        mode: '0644'

    - name: Copy Key for prometheus
      ansible.builtin.copy:
        src: /certs/shadowman_private.key
        dest: /certs/shadowman_private.key
        owner: root
        group: root
        mode: '0644'

    - name: Install httpd
      ansible.builtin.package:
        name: httpd
        state: present
      notify: HTTPD_running

    - name: Copy over httpd config
      ansible.builtin.copy:
        src: files/httpd.conf
        dest: /etc/httpd/conf/httpd.conf
        owner: root
        group: root
        mode: '0644'

    - name: Open Firewalld for prometheus
      ansible.posix.firewalld:
        port: 9090/tcp
        permanent: true
        state: enabled
      notify: restart_firewalld

    - name: Open Firewalld for grafana
      ansible.posix.firewalld:
        port: 3000/tcp
        permanent: true
        state: enabled
      notify: restart_firewalld
    
    - name: Open Firewalld for prometheus https
      ansible.posix.firewalld:
        port: 3000/tcp
        permanent: true
        state: enabled
      notify: restart_firewalld

    - name: Open Firewalld for alertmanager
      ansible.posix.firewalld:
        port: 9093/tcp
        permanent: true
        state: enabled
      notify: restart_firewalld

  handlers:
    - name: restart_firewalld
      ansible.builtin.service:
        name: firewalld
        state: restarted

    - name: HTTPD_running
      ansible.builtin.service:
        name: httpd
        state: started
        enabled: true
